{
  "reports" : [
    {
      "id": 0,
      "title": "Welcome to AdaCode",
      "subtitle": "Report I/O Webapp",
      "writer": "Ada Kaminkure",
      "fields": "ALL",
      "date": "14 October 2015",
      "content": "<p>ยินดีต้อนรับทุกท่านครับ REPORT I/O จะเป็นส่วนที่ผมจะเขียนบทความต่างๆเล่าเรื่องราวในโลกเทคโนโลยีมาอัพเดทให้กับทุกท่านที่หลงไหลในศาสตร์ของการเขียนโค้ด และรักที่จะสร้างสรรค์ผลงาน Software และ Hardware ถ้างั้นเรามาอ่านบทความกันเลยดีกว่าครับ ^^</p><h3><b>Ada Kaminkure,</b></h3><p><b>Founder</b></p><br><img src='/images/forReport/loog-footage.jpg' alt='adacode logo'/>"
    },
    {
      "id": 1,
      "title": "Science of MEAN",
      "subtitle": "What is MEAN Stack",
      "writer": "Ada Kaminkure",
      "fields": "JavaScript, Node.js, AngularJS, ExpressJS, MongoDB, Web Development",
      "date": "14 October 2015",
      "content": "<img src='/images/forReport/components/mean.jpg' alt='mean stack'><br><p>&nbsp;&nbsp;&nbsp;&nbsp;ในยุคที่อะไรๆก็เปลี่ยนแปลงไปอย่างรวดเร็วโดยเฉพาะเทคโนโลยีและยิ่งด้านการเขียนเว็บไซต์ เขียนแอพพลิเคชั่นด้วยแล้วหมุนไวจนเราอาจจะรู้สึกเหนื่อยที่จะตามเลยล่ะครับ ผมเลยอยากจะมา intro กันสั้นๆสำหรับหนึ่งในชุดพัฒนาเว็บไซต์สุดร้อนแรงแห่งยุคนี้เลยก็ว่าได้นั่นก็คือ MEAN Stack ผมเชื่อว่าหลายท่านคงเคยได้ยินกันมาบ้างหรือไม่ก็ตาม วันนี้ผมจะนำพาทุกท่านไปรู้จักกันว่า MEAN Stack ที่เขากำลังพูดถึงในช่วงนี้คืออะไรกันแน่<br><br><b>MEAN ย่อมาจาก MongoDB + Express + AngularJS + NodeJS</b> ซึ่งก็คือการนำเอาเทคโนโลยีทั้ง 4 ตัวข้างต้นมาผสมใช้งานร่วมกันจนเกิดเป็นชุดของการพัฒนาเว็บไซต์ขึ้น แล้วทำไมต้อง MEAN Stack? ผมเชื่อว่าคำถามนี้ต้องเกิดขึ้นอย่างแน่นอนสำหรับนักพัฒนาทุกๆท่าน<br>เอาง่ายๆครับข้อดี!! ใช้แค่ Javascript ภาษาเดียวเท่านั้นในการพัฒนาตั้งแต่ Back-end(ระบบการทำงานเบื้องหลัง) ยัน Front-end (ส่วนที่มีการติดต่อผู้ใช้งาน) เหมาะมากสำหรับมือใหม่ไม่วุ่นวายซับซ้อน มีชุมชุนนักพัฒนาคอยให้ความช่วยเหลือเราตลอดเวลา อีกทั้งยังเร็วมากๆอีกด้วย ข้อดีเอาไว้ประมาณนี้ก่อน เพราะมีข้อดีอีกหลากหลายครับที่จะเอามาชูให้นักพัฒนาในภาษาหรือระบบอื่นๆหันมาเขียน MEAN กัน งั้นเรามาดูกันต่อดีกว่าครับว่าแต่ละชั้นแต่ละ Stack ทำหน้าที่อะไรกันบ้างเรามาเริ่มกันที่</p><br><img src='/images/forReport/components/nodejs.jpg' alt='nodejs'><br><p><b>NodeJS</b> -> นิยามง่ายๆของ NodeJS และจุดประสงค์ของมันคือ ถูกออกแบบมาเพื่อเป็น Server คอยจัดการ Request จากผู้ใช้ และ Response ส่งที่ถูกต้องกลับไปอีกทั้งมันก็คือ Interpreter ที่ทำให้เราสามารถรัน javascript นอก Internet browser ได้นั่นเองครับตัวถัดมา</p><br><img src='/images/forReport/components/expressjs.jpg' alt='expressjs'><br><p><b>ExpressJS</b> -> เจ้าสิ่งนี้จะทำให้ชีวิตเราง่ายขึ้นอีกเยอะเลยครับเพราะมันคือ Web freamwork ที่ถูกสร้างขึ้นมาเพื่อ NodeJs สำหรับเจ้าตัวนี้ได้รับแรงบันดาลใจมาจาก Ruby on Rail ซึ่งหลายๆท่านคงรู้จักแล้วถูกอกถูกใจกันไม่น้อย ExpressJS ก็เช่นเดียวกันถูกออกแบบให้ใช้งานง่ายและวางโครงสร้างไว้อย่างราบรื่นเหมาะแก่การพัฒนาเป็นอย่างยิ่ง สำหรับหน้าที่หลักๆของ ExpressJS คือ คอยเป็นคนจัดการ Route ให้กับเว็บไซต์ของเรารวมถึงการเรียกใช้งาน Middleware อื่นๆก็สามารถทำผ่าน ExpressJS ได้เลยอย่างสบายๆ</p><br><img src='/images/forReport/components/mongodb.png' alt='mongodb'><br><p><b>MongoDB</b> -> Document database สุดฮิตที่ใครๆก็ต้องพูดถึงด้วยความเป็น New Type Database ทำให้มันเป็นที่น่าสนใจไม่น้อยเลยทีเดียว ฉีกกรอบเดิมๆที่เราเคยรู้จักกับ Database ในรูปแบบตารางความสัมพันธ์(Relational Database) ทิ้งไปได้เลยครับ เพราะ MongoDB จะนำเสนอสิ่งที่แถบจะตรงกันข้ามกับ Relational Database ไปเลย เริ่มที่การจัดเก็บฐานข้อมูลของเราในรูปแบบเอกสาร BSON หรือจินตนาการง่ายๆครับเก็บในรูปแบบ เอกสาร JSON ที่มี Fields และ Values เป็นต้น ข้อดีที่ไม่อาจกล่วงถึงเห็นจะไม่ได้คือ ความเป็น Schemaless ของ ฐานข้อมูลแบบ Document ส่งผลให้เราสามารถออกแบบฐานข้อมูลของเราได้อย่างยืดหยุ่น อิสระ ไร้ข้อผูกมัดเมื่อต้องมีการแก้ไขในระยะหลังเริ่มพัฒนาไปแล้ว ผมเชื่อว่าคุณจะสนุกไปกับการใช้ MongoDB ครับ</p><br><img src='/images/forReport/components/angularjs.png' alt='angularjs'><br><p><b>AngularJS</b> -> สุดท้าย Front-end framework สุดฮอตจากค่ายดังอย่าง Google ที่ถึงแม้ตอนนี้กำลังจะออกเวอร์ชั่น 2 ที่เปลี่ยนแปลงทุกอย่างเรียกว่าแทบจะยกชุดกันเลยทีเดียว แต่ก็ยังไม่ต้องกังวลครับยังไม่เร็วขนาดนั้น เพราะฉะนั้นตอนนี้เราสามารถใช้ AngularJS ในเวอร์ชั่นแรกได้อย่างสบายใจครับ สำหรับ AngularJS จะเข้ามามีบทบาททำให้การพัฒนา Front-end เป็นเรื่องที่ง่ายและสะดวกยิ่งขึ้นโดยเฉพาะยุคนี้ที่ฮิตการทำ SPA หรือ Single Page Application website ที่อะไรทุกๆอย่างมารวมอยู่ในหน้าเดียวไม่ต้องมีการโหลดใหม่ทำงานได้เหมือนแอพพลิเคชั่นบนมือถือกันเลยทีเดียว เจ้า AngularJS นี่แหละที่จะทำให้ชีวิตของเรากับการพัฒนา Front-end ลื่นไหลยิ่งขึ้นเป็นยังไงกันบ้างครับกับการรู้จัก MEAN Stack รู้สึกรักหรือชอบมันแบบผมกันรึเปล่า^^ โดยส่วนตัวผม ขอแนะนำว่ายุคนี้คือ ยุคของ Javascript จริงๆครับเพราะแค่ภาษาเดียวก็สามารถทำได้ครอบจักรวาลจริงๆทั้งเว็บ ทั้งแอพ ทั้งเกมส์ ทั้ง IOT และการเริ่มต้นทำงานกับ MEAN ถือเป็นจุดเริ่มต้นที่ดีครับทำให้เราเห็นภาพรวมของการนำ Javaascript ไปใช้ทำงานอื่นๆได้มากยิ่งขึ้นเอาไว้โอกาสหน้าผมจะนำ Javascritp ในรูปแบบอื่นๆมานำเสนอนะครับ สวัสดีครับ</p><br><p><b>reference</b><br><a href='https://nodejs.org/'>https://nodejs.org/</a><br><a href='http://expressjs.com/'>http://expressjs.com/</a><br><a href='https://www.mongodb.org/'>https://www.mongodb.org/</a><br><a href='https://angularjs.org/'>https://angularjs.org/</a><br></p>"
    },
    {
      "id": 2,
      "title": "Ada talks with Node.js",
      "subtitle": "First times Interview Node.js",
      "writer": "Ada Kaminkure",
      "fields": "JavaScript, Node.js, Web Development",
      "date": "15 October 2015",
      "content": "<img src='/images/forReport/components/nodejs.jpg' alt='nodejs'><p> หลายๆท่านอาจจะคุ้นเคยกับการใช้ JavaScript ในฝั่ง Client side เป็นอย่างดีแต่วันนี้เราจะมาดูกันว่าจริงๆแล้วความสามารถของเจ้า JavaScript ได้ถูกพัฒนาไปไกลมากไม่ได้เป็นเพียงแค่ Client side อีกต่อไป ด้วยความสามารถอันทรงพลังของ Ryan Dahl ได้ทำให้ JavaScript สามารถที่จะรันนอก Browser ได้และสิ่งที่เขาสร้างขึ้นมาได้พลิกโลกโปรแกรมมิ่งครั้งยิ่งใหญ่กับ <b>“Node.js”</b><br><br><b>Node.js คืออะไร</b><br>ถ้าจะให้ว่ากันโดยทั่วไปและตรงประเด็นผมจะไม่พยายามเขียนให้ซ้ำกับ Wikipedia นะครับเพราะว่าทุกคนสามารถเข้าไปอ่านดูได้ แต่ถ้าจะว่าไปแล้วเอาแบบตรงๆให้เข้าใจว่า Node.js คืออะไรง่ายๆครับ <b>“มันคือสิ่งที่ทำให้เราสร้าง Back-end จาก JavaScript”</b> จบนะครับตรงไปตรงมาและครอบคลุมทุกการใช้งาน ฮ่าๆ แต่เอาให้ละเอียดกว่านี้อีกหน่อย Node.js ถูกสร้างขึ้นมาเป็น <b>cross-platform runtime environment สำหรับฝั่ง server และโปรแกรมทางด้าน Networking</b> เรียกให้ง่ายขึ้นไปอีกเราสามารถนำ Node.js มาเขียนเป็น server ได้เลยทีเดียวเพื่อให้สามารถรัน Applications ต่างๆหรือเอาส่วนประกอบอื่นๆที่จะแนะนำต่อๆไปมาประกอบร่างรวมกันเพื่อสร้างเว็บแอฟสายโหดได้เลยทีเดียวนะครับ ซึ่งปัจจุบัน Node.js มาถึงเวอร์ชั่นที่ 4.2.1 และเป็นเวอร์ชั่นที่ Stable รวมถึงการ support ในระยะยาว (LTS) นั่นหมายความว่าคุณจะสามารถใช้งาน Node.js ในเวอร์ชั่นนี้ได้จนกว่าจะมี LTS ตัวใหม่ออกมาทำให้คุณมั่นใจได้ว่า project ของคุณจะไม่มีปัญหาระดับ critical แน่นอนครับ ส่วนที่ว่า เอ๊ะ! ทำไม Node.js ถึงมาถึงเวอร์ชั่นที่ 4 แล้ว เร็วจริงๆ จริงๆมันมีที่มาครับ เพราะว่าครั้งหนึ่ง ทีมพัฒนา Node.js เกิดความเห็นไม่ตรงกันเลยแยกตัวออกไปพัฒนาสิ่งที่คล้ายกับ Node.js แต่ว่าดีกว่า!! (ในมุมหนึ่ง) ชื่อโปรเจคว่า io.js แน่นอนครับว่ามีพื้นฐานมาจาก Node.js แต่ว่ามีการต่อยอดที่แตกต่างกันออกไป จนวันหนึ่ง!! io.js บอกว่าพอล่ะไปต่อไม่ไหวล่ะขอกลับมารวมตัวกับ Node.js ซึ่งทางนี้ก็ยินดีต้อนรับเป็นอย่างยิ่งเพราะมันเหมือนกับการพัฒนาแบบก้าวกระโดดส่งผลให้ Node.js มีทุกอย่างที่ io.js เคยมี!! เจ๋งอ่ะ!! กลับมาที่เรื่องเวอร์ชั่นครับ io.js พัฒนาออกไปไกลกว่า Node.js มากครับที่เวอร์ชั่น 3 และระบบการเรียกเวอร์ชั่นที่แตกต่างกัน ทำให้ที่ประชุมลงมติว่าเพื่อเอาใจแฟนคลับทาง io.js จึงใช้วิธีสุดฮิปบวกเวอร์ชั่นกันแล้ว <b>คลอด Node.js v4.0.0 stable ออกมา!!</b> ซึ่งการออก stable version ออกมาทำให้บริษัทและองค์กรต่างๆ สามารถนำไปใช้ได้อย่างมั่นใจยิ่งขึ้นและที่สำคัญที่ผมชอบมากที่สุดเลยคือ การรองรับ Javascript 6 หรือ ES6 แบบเต็มรูปแบบ มันส่งผลทำให้คุณและผมเขียน Node.js สนุกมากขึ้นจริงๆครับ^^ มาดูกันต่อครับ...<br><br><b>ข้อดีของ Node.js มีอะไรบ้างอ่ะ?</b><br>ถ้าจะถามถึงข้อดีมีนะๆเยอะด้วยงั้นมาดูเป็นข้อๆกัน<br>1. คุณสามารถใช้ Node.js ได้กับทุก platforms ไม่ว่าจะเป็น Linux, OSX, Windows, FreeBDS, NonStop, และ IBM เยอะเนอะ!<br><br>2. ทุกคนต้องพูดถึงเรื่องนี้คือ Node.js เป็น Non-blocking I/O แปลว่าะไรอ่ะ มันแปลว่า Flow การทำงานของระบบคุณจะไม่ติดขัดถ้ามีส่วนใดส่วนหนึ่งยังทำไม่เสร็จ เช่น ถ้าคุณต้องประมาลผลในส่วนของ Function A แต่มันยังไม่เสร็จอ่ะระบบจะต้องรอเหรอ? ไม่ๆเราจะไม่รอเราจะทำส่วนถัดๆไปแล้วพอ Function A ทำเสร็จก็ส่งค่าออกมานำไปทำต่อได้ประมาณนี้ครับ ส่วนอะไรบ้างล่ะที่เป็นแบบ Blocking ก็เช่น PHP ครับถ้าตรงนี้ไม่เสร็จก็จะไม่ทำต่อ Node.js เลยนิยมไงล่ะ ฮ่าๆๆๆ<br><br>3. Node.js เป็น Event-Driven Architecture อธิบายสั้นๆได้ใจความครับเพราะถ้าพูดเยอะเราอาจจะต้องเขียนอีกบทความหนึ่งซึ่งผมขอติดไว้ก่อน เอาสั้นๆก่อนนะ คือ มันจะคอยตรวจจับ Event ที่มีการส่งมาว่าเป็นอะไรและก็จะทำงานตาม Event นั้นครับ สร้างตัวตอบสนองไว้รอแล้วรอจับกระแสครับ ทำงานคล้ายๆกับระบบฮอร์โมนในร่างกายคนเราเลยครับ<br><br>4. การทำ Real-time กับ Node.js เป็นเรื่องที่ง่ายและนิยมมากๆด้วยความสามารถที่ไม่เป็น Non-blocking แล้วสามารถทำให้มันทำงานได้รวดเร็วทันใจมากครับ<br><br>5. Node.js มาพร้อมกับ npm หรือก็คือ Node Package Management ที่ทำให้เราสามารถติดตั้ง Packages ต่างๆจาก developer ทั่วโลกได้เพียงปลายนิ้วสัมผัสแน่นอนว่าเดี๋ยวผมจะแนะนำ Packages ที่คนใช้ Node.js ทุกคนต้องรู้จักและต้องใช้เป็นให้ครับ^^ <br><br>มาเอาไว้ที่ 5 ข้อกันก่อนสำหรับคุณงามความดีของ Node.js ต่อจากนี้มาดูรายชื่อ 10 บริษัทยักษ์ใหญ่ที่ไว้วางใจใช้ Node.js เป็นตัวรันธุรกิจกันบ้าง<b><br>1. Microsoft<br>2. Yahoo!<br>3. Walmart<br>4. Groupon<br>5. SAP<br>6. LinkedIn<br>7. Rakuten<br>8. PayPal<br>9. Voxer<br>10 .GoDaddy<br></b>รู้จักกันเป็นอย่างดีใช่ไหมครับกับ 10 บริษัทยักษ์ใหญ่เหล่านี้ที่เปลี่ยนแปลงโครงสร้างของตัวเองมาเลือกใช้ Node.js งั้นแปลว่า JavaScript Back-end ก็ไม่ทำให้ใครหลายๆคนผิดหวังกันอย่างแน่นอน ติดตามบทความเกี่ยวกับ Node.js ได้ที่นี่เสมอเลยครับ สำหรับวันนี้สวัสดีครับ^^<br><br><b>reference</b><br><a href='https://nodejs.org/'>https://nodejs.org/</a><br><a href='https://en.wikipedia.org/wiki/Node.js'>https://en.wikipedia.org/wiki/Node.js</a><br></p>"
    }
  ]
}
